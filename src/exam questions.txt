Exam 2 - question about ParallelStreamer (Threads) and pearson (code optimization)
Exam 4 - question about binary expression with fork join pool, code optimization about averages
Exam 5 - question 1 about futures, 
		 question 1.2 a.b about mimicing active object
		 question 2 a.c about recursive with futures, something similar to binary search 
		 question 3 about code optimization with strings


Exam 6 - 
		question 1 - Future question with some parallel tasker
		question 2 - Generic singleton using double check lock
		question 3 - some distance code optimization


Exam 7 - 
		question 1 - Recursive question FJ_GCD
		question 2 - Implement fold and map
		question 3 - geoMedian and EucDistance optimization
		
Exam 8 - 
		question 1 - Implement future with thenDo finallyDo set
		question 2 - Enthropy - question from hell
		
Exam 9 - 
		question 1 - Thread questions, how so use threads without synchronized 
					 The answer is to use "Atomic" things
		question 2 - Implement Pipe with add filter forEach map and stop
		question 3 - Optimize most common number(grade) withing an array
		
Exam 10 - 
		question 1 - MyTimer question(threads) - run task x time per second
		question 2 - ControllerMaker - singleton question
		question 3 - Optimize point distance from circles(check if point is in circle)

Exam 11 - 
		question 1 - Tasker - thread question with hashmap (I failed at this)
		question 2 - ParMaxSearcher - Bin tree recursive question
		question 3 - Optimize fold method (extract variable with code motion)
		
Exam 12 - 
		question 1 - ObservableFuture - create future with obserable to mimic get
		question 2 - Par - recursive task to find sum of nodes in tree
		question 3 - Optimize maximum value in bool matrix (
			TENARY IS FASTER THAN IF ELSE
		)
		
Exam 13 - 
	
	
		question 3 - softmaxOpt code optimization

	//How to run something in background and return future
	public <V> Future<V> threadIt(Callable<V> callable){
		// submit also puts the object in the queue, and returns Future<Integer>
		return es.submit(callable);
	}
	
	
	//Submit need callable as param
	
	//RecursiveTask<Integer> - rememebr to enter type with recursive task
	
	
	//**********THIS IS HOW YOU IMPLEMENT FUTURE:**********
	public class MyFuture<V> {
    V value;
    Runnable r;

    public MyFuture() {
        r = new Thread(() ->{});
    }

    public void set(V value) {
        this.value=value;
        r.run();
    }

    public <R> MyFuture<R> thenDo(Function<V, R> func) {
        MyFuture<R> myFuture=new MyFuture<>();
        r=()->myFuture.set(func.apply(value));
        return myFuture;
    }
    public void finallyDo(Consumer<V> c) {
        r=()->c.accept(value);
    }
}
