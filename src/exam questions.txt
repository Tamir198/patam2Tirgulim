Exam 2 - question about ParallelStreamer (Threads) and pearson (code optimization)
Exam 4 - question about binary expression with fork join pool, code optimization about averages
Exam 5 - question 1 about futures, 
		 question 1.2 a.b about mimicing active object
		 question 2 a.c about recursive with futures, something similar to binary search 
		 question 3 about code optimization with strings


Exam 6 - 
		question 1 - Future question with some parallel tasker
		question 2 - Generic singleton using double check lock
		question 3 - some distance code optimization







	//How to run something in background and return future
	public <V> Future<V> threadIt(Callable<V> callable){
		// submit also puts the object in the queue, and returns Future<Integer>
		return es.submit(callable);
	}
	
	
	//Submit need callable as param
	
	//RecursiveTask<Integer> - rememebr to enter type with recursive task
	
	
	//THIS IS HOW YOU IMPLEMENT FUTURE:
	public class MyFuture<V> {
    V value;
    Runnable r;

    public MyFuture() {
        r = new Thread(() ->{});
    }

    public void set(V value) {
        this.value=value;
        r.run();
    }

    public <R> MyFuture<R> thenDo(Function<V, R> func) {
        MyFuture<R> myFuture=new MyFuture<>();
        r=()->myFuture.set(func.apply(value));
        return myFuture;
    }
    public void finallyDo(Consumer<V> c) {
        r=()->c.accept(value);
    }
}
